name: Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repo
        uses: actions/checkout@v5

      # Setup Node.js WITH npm cache (only if a lockfile exists)
      - name: Setup Node.js (cached)
        if: ${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: npm
          # Point cache to the detected lockfile(s)
          cache-dependency-path: |
            **/package-lock.json
            **/npm-shrinkwrap.json

      # Setup Node.js WITHOUT cache (no lockfile case)
      - name: Setup Node.js (no cache)
        if: ${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      # Install dependencies (works with or without a lockfile)
      - name: Install dependencies
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install
          fi

      # (Optional but recommended by GitHub Pages docs)
      - name: Configure Pages
        uses: actions/configure-pages@v5

      # Build the project with npm
      - name: Build project
        run: npm run build

      # Upload production-ready build files
      - name: Upload production-ready build files
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./dist

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
